Finding suitable PLTs
Checking PLT...
[:crypto, :elixir, :erts, :ex_llm, :gun, :hackney, :jason, :kernel, :logger, :req, :stdlib, :telemetry, :tesla, :yaml_elixir]
PLT is up to date!
ignore_warnings: .dialyzer_ignore.exs

Starting Dialyzer
[
  check_plt: false,
  init_plt: ~c"/Users/azmaveth/code/ex_llm/_build/dev/dialyxir_erlang-28.0.1_elixir-1.18.4_deps-dev.plt",
  files: [~c"/Users/azmaveth/code/ex_llm/_build/dev/lib/ex_llm/ebin/Elixir.ExLLM.Providers.Ollama.beam",
   ~c"/Users/azmaveth/code/ex_llm/_build/dev/lib/ex_llm/ebin/Elixir.ExLLM.Infrastructure.Retry.beam",
   ~c"/Users/azmaveth/code/ex_llm/_build/dev/lib/ex_llm/ebin/Elixir.ExLLM.Pipeline.Builder.beam",
   ~c"/Users/azmaveth/code/ex_llm/_build/dev/lib/ex_llm/ebin/Elixir.Mix.Tasks.ExLlm.Cache.Stats.beam",
   ~c"/Users/azmaveth/code/ex_llm/_build/dev/lib/ex_llm/ebin/Elixir.ExLLM.Embeddings.beam",
   ...],
  warnings: [:unknown]
]
Total errors: 96, Skipped: 54, Unnecessary Skips: 0
done in 0m1.6s
lib/ex_llm/plugs/execute_request.ex:93:11:pattern_match
The pattern can never match the type.

Pattern:
_response = %Tesla.Env{}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:209:17:pattern_match
The pattern can never match the type.

Pattern:
{:ok, %{<<100, 97, 116, 97>> => _models}}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:592:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:614:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:636:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, %{:body => _content, :status => 200}}

Type:
{:error, _} | {:ok, binary()}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:639:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, %{:body => _body, :status => _status}}

Type:
{:error, _} | {:ok, binary()}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:715:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:737:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/anthropic.ex:759:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/bedrock/build_request.ex:51:16:call
The function call will not succeed.

ExLLM.Pipeline.Request.assign(
  %ExLLM.Pipeline.Request{:provider_request => binary(), :state => :pending, _ => _},
  :model,
  _model :: binary()
)

breaks the contract
(t(), atom(), any()) :: t()

________________________________________________________________________________
lib/ex_llm/providers/bedrock/stream_parse_response.ex:32:8:no_return
Function initiate_streaming/1 has no local return.
________________________________________________________________________________
lib/ex_llm/providers/gemini/parse_response.ex:45:64:call
The function call will not succeed.

ExLLM.Core.Cost.calculate(
  <<103, 101, 109, 105, 110, 105>>,
  _model :: any(),
  _usage :: %{:input_tokens => _, :output_tokens => _, :total_tokens => _}
)

breaks the contract
(String.t() | atom(), String.t(), ExLLM.Types.token_usage()) ::
  ExLLM.Types.cost_result() | %{:error => String.t()}

________________________________________________________________________________
lib/ex_llm/providers/gemini/stream_parse_response.ex:55:31:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/groq/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/lmstudio.ex:309:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response = %{<<100, 97, 116, 97>> => _models}}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/lmstudio.ex:321:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/lmstudio.ex:352:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/lmstudio/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/mistral/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/ollama.ex:294:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _body}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/ollama.ex:301:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/ollama.ex:1573:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _models}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/ollama/stream_parse_response.ex:54:31:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/openai.ex:3393:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/openai.ex:3431:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/openai.ex:3512:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/openai.ex:3557:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/openai/stream_parse_response.ex:55:31:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/openrouter/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/perplexity/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
lib/ex_llm/providers/shared/http/multipart.ex:159:73:unknown_type
Unknown type: Tesla.Multipart.part/0.
________________________________________________________________________________
lib/ex_llm/providers/shared/http/multipart.ex:349:7:no_return
Function stream_file/2 has no local return.
________________________________________________________________________________
lib/ex_llm/providers/shared/http/multipart.ex:349:45:call
The function call will not succeed.

ExLLM.Providers.Shared.HTTP.Multipart.stream_file(_ :: any(), _ :: any(), nil, [])

breaks the contract
(String.t(), String.t(), String.t(), :elixir.keyword()) :: Enumerable.t()

________________________________________________________________________________
lib/ex_llm/providers/shared/http_client.ex:74:8:no_return
Function handle_intercepted_get/3 has no local return.
________________________________________________________________________________
lib/ex_llm/providers/shared/http_client.ex:75:34:call
The function call will not succeed.

ExLLM.Testing.TestResponseInterceptor.intercept_request(_url :: any(), nil, _headers :: any(), _opts :: any())

breaks the contract
(String.t(), map(), [any()], :elixir.keyword()) :: intercept_result()

________________________________________________________________________________
lib/ex_llm/providers/shared/http_client.ex:367:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, %Tesla.Env{:body => _body}}

Type:
{:error, _}

________________________________________________________________________________
lib/ex_llm/providers/shared/streaming/compatibility.ex:128:13:pattern_match
The pattern can never match the type.

Pattern:
{:ok, __stream_id}

Type:
{:error, <<_::312>>}

________________________________________________________________________________
lib/ex_llm/providers/shared/streaming/engine.ex:221:15:pattern_match
The pattern can never match the type.

Pattern:
{:ok, _response}

Type:
{:error, {:exception, %{:__exception__ => true, :__struct__ => atom(), atom() => _}}}

________________________________________________________________________________
lib/ex_llm/providers/shared/streaming/engine.ex:305:23:call
The function call will not succeed.

Tesla.post(
  _client_with_context :: %Tesla.Env{
    :__client__ => %Tesla.Client{
      :adapter =>
        nil
        | {atom(),
           atom()
           | (... ->
                %Tesla.Env{
                  :__client__ => %Tesla.Client{
                    :adapter => _,
                    :fun => _,
                    :post => [any()],
                    :pre => [any()]
                  },
                  _ => _
                })}
        | {atom(), atom(), _},
      :fun => _,
      :post => [
        {atom(),
         atom()
         | (... ->
              %Tesla.Env{
                :__client__ => %Tesla.Client{
                  :adapter => _,
                  :fun => _,
                  :post => [any()],
                  _ => _
                },
                _ => _
              })}
        | {atom(), atom(), _}
      ],
      :pre => [
        {atom(),
         atom()
         | (... ->
              %Tesla.Env{
                :__client__ => %Tesla.Client{
                  :adapter => _,
                  :fun => _,
                  :post => [any()],
                  _ => _
                },
                _ => _
              })}
        | {atom(), atom(), _}
      ]
    },
    :__module__ => atom(),
    :body => _,
    :headers => [{binary(), binary()}],
    :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
    :opts => Keyword.t(),
    :query => [{atom() | binary(), binary() | [{atom() | binary(), binary() | [{_, _}]}]}],
    :status => nil | integer(),
    :url => binary()
  },
  _path :: any(),
  _body :: any(),
  [
    {:headers, [{<<_::48, _::size(56)>>, <<_::64, _::size(72)>>}, ...]}
    | {:opts, [{:recv_timeout, _} | {:stream_to, pid()}, ...]},
    ...
  ]
)

will never return since the success typing is:
(
  %Tesla.Client{
    :adapter => nil | {atom(), atom() | (... -> map())} | {atom(), atom(), _},
    :fun => _,
    :post => [{atom(), atom() | (... -> any)} | {atom(), atom(), _}],
    :pre => [{atom(), atom() | (... -> any)} | {atom(), atom(), _}]
  },
  any(),
  any(),
  [{:body | :headers | :method | :opts | :query | :url, _}]
) ::
  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}

and the contract is
(Tesla.Env.client(), Tesla.Env.url(), Tesla.Env.body(), [option()]) :: Tesla.Env.result()

________________________________________________________________________________
lib/ex_llm/providers/shared/streaming/engine.ex:336:23:call
The function call will not succeed.

Tesla.post(
  _client_with_context :: %Tesla.Env{
    :__client__ => %Tesla.Client{
      :adapter =>
        nil
        | {atom(),
           atom()
           | (... ->
                %Tesla.Env{
                  :__client__ => %Tesla.Client{
                    :adapter => _,
                    :fun => _,
                    :post => [any()],
                    :pre => [any()]
                  },
                  _ => _
                })}
        | {atom(), atom(), _},
      :fun => _,
      :post => [
        {atom(),
         atom()
         | (... ->
              %Tesla.Env{
                :__client__ => %Tesla.Client{
                  :adapter => _,
                  :fun => _,
                  :post => [any()],
                  _ => _
                },
                _ => _
              })}
        | {atom(), atom(), _}
      ],
      :pre => [
        {atom(),
         atom()
         | (... ->
              %Tesla.Env{
                :__client__ => %Tesla.Client{
                  :adapter => _,
                  :fun => _,
                  :post => [any()],
                  _ => _
                },
                _ => _
              })}
        | {atom(), atom(), _}
      ]
    },
    :__module__ => atom(),
    :body => _,
    :headers => [{binary(), binary()}],
    :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
    :opts => Keyword.t(),
    :query => [{atom() | binary(), binary() | [{atom() | binary(), binary() | [{_, _}]}]}],
    :status => nil | integer(),
    :url => binary()
  },
  _path :: any(),
  _body :: any(),
  [
    {:headers, [{<<_::48, _::size(56)>>, <<_::64, _::size(72)>>}, ...]}
    | {:opts, [{:recv_timeout, _} | {:stream_to, pid()}, ...]},
    ...
  ]
)

will never return since the success typing is:
(
  %Tesla.Client{
    :adapter => nil | {atom(), atom() | (... -> map())} | {atom(), atom(), _},
    :fun => _,
    :post => [{atom(), atom() | (... -> any)} | {atom(), atom(), _}],
    :pre => [{atom(), atom() | (... -> any)} | {atom(), atom(), _}]
  },
  any(),
  any(),
  [{:body | :headers | :method | :opts | :query | :url, _}]
) ::
  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}

and the contract is
(Tesla.Env.client(), Tesla.Env.url(), Tesla.Env.body(), [option()]) :: Tesla.Env.result()

________________________________________________________________________________
lib/ex_llm/providers/xai.ex:60:pattern_match
The pattern can never match the type.

Pattern:
:get

Type:
:post

________________________________________________________________________________
lib/ex_llm/providers/xai/stream_parse_response.ex:7:pattern_match
The pattern can never match the type.

Pattern:
{:ok, :streaming}

Type:

  {:error, _}
  | {:ok,
     %Tesla.Env{
       :__client__ => %Tesla.Client{
         :adapter => nil | {_, _} | {_, _, _},
         :fun => _,
         :post => [any()],
         :pre => [any()]
       },
       :__module__ => atom(),
       :body => _,
       :headers => [{_, _}],
       :method => :delete | :get | :head | :options | :patch | :post | :put | :trace,
       :opts => [{_, _}],
       :query => [{_, _}],
       :status => nil | integer(),
       :url => binary()
     }}


________________________________________________________________________________
done (warnings were emitted)
Halting VM with exit status 2
