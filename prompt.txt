I've done the web search as requested. Key findings:

1. **opentelemetry_telemetry exists but has issues**: Users report it's "heavily outdated, without proper documentation" and examples don't work properly. The library is at 1.0.0-beta.4 which suggests it's not production-ready.

2. **Direct OpenTelemetry instrumentation is preferred**: The community recommends using OpenTelemetry directly rather than bridging from telemetry events, especially for non-library authors.

3. **Established patterns exist**: Libraries like opentelemetry_phoenix and opentelemetry_ecto directly instrument their respective libraries by attaching to telemetry events internally.

4. **Context propagation limitations**: Span contexts are stored in process dictionary, limiting correlation to single processes. This is a significant limitation for distributed tracing across processes.

Given these findings, I'm thinking:
1. Keep telemetry for decoupled event emission (good for library design)
2. Provide an optional OpenTelemetry integration module that users can enable
3. Fix the ETS race conditions as you suggested
4. Consider telemetry_metrics for aggregation instead of custom ETS

What are your thoughts on this hybrid approach? Should we still pursue full OpenTelemetry integration given the library limitations?